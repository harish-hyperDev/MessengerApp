{"ast":null,"code":"var _jsxFileName = \"F:\\\\CooL\\\\Websites\\\\chat-app\\\\mitai-app\\\\src\\\\App.js\";\n//import logo from './logo.svg';\n//import { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Button from '@mui/material/Button'; // Import the functions you need from the SDKs you need\n//import { initializeApp } from \"firebase/app\";\n\nimport { FormControl, InputLabel, Input } from '@mui/material';\nimport Message from './Message';\nimport dbb from './firebase';\nimport { query, onSnapshot, collection } from \"firebase/firestore\";\nimport { doc, setDoc } from \"firebase/firestore\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([//{username: 'diablo', message: 'bo aki mayiro.. shamu nuga'},\n    //{username: 'hyperx', message: 'owai moo'}\n  ]);\n  const [username, setUsername] = useState(''); // useEffect is used for running a piece of code based on a condition  \n\n  useEffect(() => {\n    const q = query(collection(dbb, \"messages\"));\n    const unsub = onSnapshot(q, querySnapshot => {\n      //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach(doc => {\n        setMessages(querySnapshot.docs.map(doc => doc.data()));\n      });\n      console.log(unsub);\n      /*\n        dbb.collection('messages').onSnapshot(snapshot => {\n          setMessages(snapshot.docs.map(doc => doc.data()))\n      */\n    });\n  }, []);\n  /*\n  useEffect(() => {\n    const q = query(collection(dbb, \"messages\"))\n    const unsub = onSnapshot(q, (querySnapshot) => {\n    //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        messages.add({username: username, message: input});\n      });\n      console.log(unsub);    \n    });\n  }, [] );*/\n\n  useEffect(() => {\n    setUsername(prompt('Enter your username'));\n  }, []); // [] is condition, if left blank code will run only once when \"app\" component loads\n\n  /* \n    so if we use the input variable value changes the \"code\" in useEffect will run\n    its really cool as \"input\" variable is a useState so \"input\" will change instaneously without any refresh and \"useEffect\" will run automatically as \"input\" is changing \n  */\n\n  console.log(input);\n  console.log(messages);\n\n  const sendMessage = event => {\n    event.preventDefault(); //for not refreshing the page for form\n\n    async dispatch => {\n      // all the logic to send message\n      try {\n        await setDoc(doc(dbb), {\n          username: username,\n          message: input\n        });\n      } catch (error) {}\n    };\n\n    setMessages([...messages, {\n      username: username,\n      message: input\n    }]);\n    setInput('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"GHOST Chat\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Sup' \", username), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Enter message..\"), /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: event => setInput(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: !input,\n    type: \"submit\",\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Send Message\"))), messages.map(message => /*#__PURE__*/React.createElement(Message, {\n    username: username,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }) //<p>{message}</p>\n  ));\n}\n\nexport default App;","map":{"version":3,"sources":["F:/CooL/Websites/chat-app/mitai-app/src/App.js"],"names":["React","useEffect","useState","Button","FormControl","InputLabel","Input","Message","dbb","query","onSnapshot","collection","doc","setDoc","App","input","setInput","messages","setMessages","username","setUsername","q","unsub","querySnapshot","forEach","docs","map","data","console","log","prompt","sendMessage","event","preventDefault","dispatch","message","error","target","value"],"mappings":"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","sourcesContent":["//import logo from './logo.svg';\n//import { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Button from '@mui/material/Button'\n// Import the functions you need from the SDKs you need\n//import { initializeApp } from \"firebase/app\";\nimport { FormControl, InputLabel, Input } from '@mui/material';\nimport Message from './Message';\nimport dbb from './firebase';\nimport { query, onSnapshot, collection } from \"firebase/firestore\";\nimport { doc, setDoc } from \"firebase/firestore\"; \n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n    //{username: 'diablo', message: 'bo aki mayiro.. shamu nuga'},\n    //{username: 'hyperx', message: 'owai moo'}\n  ]);\n  const [username, setUsername] = useState('');\n\n  // useEffect is used for running a piece of code based on a condition  \n\n  useEffect(() => { \n    const q = query(collection(dbb,\"messages\"))\n    const unsub = onSnapshot(q, (querySnapshot) => {\n      //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        setMessages(querySnapshot.docs.map(doc => doc.data()));\n      });\n    console.log(unsub);\n    \n    /*\n      dbb.collection('messages').onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => doc.data()))\n    */\n    });\n  }, [] )\n\n  /*\n  useEffect(() => {\n    const q = query(collection(dbb, \"messages\"))\n    const unsub = onSnapshot(q, (querySnapshot) => {\n    //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        messages.add({username: username, message: input});\n      });\n      console.log(unsub);    \n    });\n  }, [] );*/\n\n\n  \n  useEffect(() => {\n    setUsername(prompt('Enter your username'));\n  }, [] ) // [] is condition, if left blank code will run only once when \"app\" component loads\n\n  /* \n    so if we use the input variable value changes the \"code\" in useEffect will run\n    its really cool as \"input\" variable is a useState so \"input\" will change instaneously without any refresh and \"useEffect\" will run automatically as \"input\" is changing \n  */\n\n  \n\n  console.log(input);\n  console.log(messages);\n\n  const sendMessage = (event) => {\n    event.preventDefault();   //for not refreshing the page for form\n    async(dispatch) => {\n      // all the logic to send message\n      try{\n\n        await setDoc(doc(dbb), {\n          username: username,\n          message: input,\n        })\n      }\n      catch (error) {\n        \n      }\n    };\n\n    setMessages( [...messages, {username: username, message: input} ]);\n    setInput('');\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <h1>GHOST Chat</h1>\n      <h2>Sup' {username}</h2>\n\n      \n\n      {/*input field*/}\n      <form>\n      <FormControl>\n        <InputLabel>Enter message..</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n        <Button variant=\"contained\" color=\"primary\" disabled={!input} type='submit' onClick={sendMessage}>Send Message</Button>\n      </FormControl>                \n      </form>\n      \n      {/*messages*/}\n      {\n        \n        messages.map(message => (\n          <Message username={username} message={message} />\n          //<p>{message}</p>\n        ))\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}