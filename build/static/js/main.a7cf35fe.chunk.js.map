{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","dbb","getFirestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","q","query","collection","orderBy","unsub","onSnapshot","querySnapshot","forEach","doc","docs","map","data","console","log","prompt","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","type","onClick","preventDefault","addDoc","timestamp","firebase","firestore","Timestamp","now","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAyBeA,MApBf,YAAuC,IAArBC,EAAoB,EAApBA,QACRC,EAD4B,EAAXC,WACKF,EAAQE,SACpC,OACI,yBAAKC,UAAS,kBAAaF,GAAU,kBACjC,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,MAETT,EAAQE,SALb,KAKyBF,EAAQA,a,gBCM3CU,EAAcC,YAAc,CAE9BC,OAAQ,0CACRC,WAAY,4BACZC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,8CAMIC,EAFHC,YAAaT,G,QCoHVU,MAjIf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAIA,EAAgCJ,mBAAS,IAAzC,mBAAOnB,EAAP,KAAiBwB,EAAjB,KA6FA,OAzFAC,qBAAU,WACR,IAAMC,EAAIC,YAAMC,YAAWZ,EAAI,YAAaa,YAAQ,YAAa,SAE3DC,EAAQC,YAAWL,GAAG,SAACM,GAG3BA,EAAcC,SAAQ,SAACC,GACrBX,EAAYS,EAAcG,KAAKC,KAAI,SAAAF,GAAG,OAAIA,EAAIG,cAElDC,QAAQC,IAAIT,QAOX,IAgBHL,qBAAU,WACRD,EAAYgB,OAAO,0BAClB,IASHF,QAAQC,IAAInB,GACZkB,QAAQC,IAAIjB,GA8CV,yBAAKrB,UAAU,OACb,0CACA,oCAAUD,GAKV,8BACA,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,wBACA,kBAACC,EAAA,EAAD,CAAOC,MAAOxB,EAAOyB,SAAU,SAAAC,GAAK,OAAIzB,EAASyB,EAAMC,OAAOH,UAC9D,kBAACI,EAAA,EAAD,CAAQ1C,QAAQ,YAAYD,MAAM,UAAU4C,UAAW7B,EAAO8B,KAAK,SAASC,QAvD9D,SAACL,GACnBA,EAAMM,iBAoBJC,YAAOzB,YAAWZ,EAAK,YAAa,CAClChB,SAAUA,EACVF,QAASsB,EACTkC,UAAWC,IAASC,UAAUC,UAAUC,QAc5CrC,EAAS,MAiBL,kBAOAC,EAASc,KAAI,SAAAtC,GAAO,OAClB,kBAAC,EAAD,CAASE,SAAUA,EAAUF,QAASA,SChIjC6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a7cf35fe.chunk.js","sourcesContent":["//import { getThemeProps } from '@mui/system'\r\nimport { Card, CardContent, Typography } from '@mui/material'\r\nimport React from 'react'\r\nimport \"./Message.css\";\r\n\r\nfunction Message({message, username}) {\r\n    const isUser = username === message.username;\r\n    return(\r\n        <div className={`message ${isUser && 'message__user'}`}>            \r\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n                <CardContent>\r\n                <Typography \r\n                    color=\"black\" \r\n                    variant=\"h5\" \r\n                    component=\"h2\"  \r\n                >\r\n                    {message.username}: {message.message}\r\n                </Typography>\r\n                </CardContent>                \r\n            </Card>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","//import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\n/*\r\n// TODO: Replace the following with your app's Firebase project configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCfUQrKu7eNxE9C8baGIAgMMIl2L4icsew\",\r\n    authDomain: \"mitai-app.firebaseapp.com\",\r\n    projectId: \"mitai-app\",\r\n    storageBucket: \"mitai-app.appspot.com\",\r\n    messagingSenderId: \"835987929957\",\r\n    appId: \"1:835987929957:web:44190dabb33940728c3f8c\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst dbb = getFirestore(app);\r\n\r\n*/\r\n\r\nconst firebaseApp = initializeApp({\r\n\r\n    apiKey: \"AIzaSyCfUQrKu7eNxE9C8baGIAgMMIl2L4icsew\",\r\n    authDomain: \"mitai-app.firebaseapp.com\",\r\n    projectId: \"mitai-app\",\r\n    storageBucket: \"mitai-app.appspot.com\",\r\n    messagingSenderId: \"835987929957\",\r\n    appId: \"1:835987929957:web:44190dabb33940728c3f8c\"\r\n    \r\n});\r\n\r\nconst dbb = getFirestore(firebaseApp);\r\n\r\nexport default dbb;\r\n","//import logo from './logo.svg';\n//import { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Button from '@mui/material/Button'\n// Import the functions you need from the SDKs you need\n//import { initializeApp } from \"firebase/app\";\nimport { FormControl, InputLabel, Input } from '@mui/material';\nimport Message from './Message';\nimport dbb from './firebase';\nimport { query, onSnapshot, collection, orderBy } from \"firebase/firestore\";\nimport { addDoc } from \"firebase/firestore\"; \nimport firebase from 'firebase/compat';\n//import { FieldValue } from 'firebase/firestore';\n\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n    //{username: 'diablo', message: 'bo aki mayiro.. shamu nuga'},\n    //{username: 'hyperx', message: 'owai moo'}\n  ]);\n  const [username, setUsername] = useState('');\n\n  // useEffect is used for running a piece of code based on a condition  \n\n  useEffect(() => { \n    const q = query(collection(dbb,\"messages\"), orderBy('timestamp', 'desc'))    \n    \n    const unsub = onSnapshot(q, (querySnapshot) => {   \n      //orderBy('timestamp','desc');\n      //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        setMessages(querySnapshot.docs.map(doc => doc.data()));\n      });\n    console.log(unsub);\n    \n    /*\n      dbb.collection('messages').onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => doc.data()))\n    */\n    });\n  }, [] )\n\n  /*\n  useEffect(() => {\n    const q = query(collection(dbb, \"messages\"))\n    const unsub = onSnapshot(q, (querySnapshot) => {\n    //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        messages.add({username: username, message: input});\n      });\n      console.log(unsub);    \n    });\n  }, [] );*/\n\n\n  \n  useEffect(() => {\n    setUsername(prompt('Enter your username'));\n  }, [] ) // [] is condition, if left blank code will run only once when \"app\" component loads\n\n  /* \n    so if we use the input variable value changes the \"code\" in useEffect will run\n    its really cool as \"input\" variable is a useState so \"input\" will change instaneously without any refresh and \"useEffect\" will run automatically as \"input\" is changing \n  */\n\n  \n\n  console.log(input);\n  console.log(messages);\n\n  const sendMessage = (event) => {\n    event.preventDefault();   //for not refreshing the page for form\n\n\n    //setMessages( [...messages, {username: username, message: input} ]);\n\n    // all the logic to send message\n    /*async () => {\n      try{\n          await addDoc(doc(dbb, \"messages\"), {\n            username: username,\n            message: input,\n        })\n        return 1;\n      }\n      catch (error) {console.log(error)}\n\n      \n    }*/\n\n    //try {\n      addDoc(collection(dbb, \"messages\"), {\n        username: username,\n        message: input,    \n        timestamp: firebase.firestore.Timestamp.now(),\n      });\n    //  console.log(\"Document written with ID: \", docRef.id);\n    //} catch (e) {\n    //  console.error(\"Error adding document: \", e);\n    //}\n    \n   /*\n    async () => {\n      const citiesCol = collection(dbb, 'cities');\n      const citySnapshot = await setDocs(citiesCol);\n    }*/\n    \n\n    setInput('');\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <h1>GHOST Chat</h1>\n      <h2>Sup' {username}</h2>\n\n      \n\n      {/*input field*/}\n      <form>\n      <FormControl>\n        <InputLabel>Enter message..</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n        <Button variant=\"contained\" color=\"primary\" disabled={!input} type='submit' onClick={sendMessage}>Send Message</Button>\n      </FormControl>                \n      </form>\n      \n      {/*messages*/}\n      {\n        \n        messages.map(message => (\n          <Message username={username} message={message} />\n          //<p>{message}</p>\n        ))\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}