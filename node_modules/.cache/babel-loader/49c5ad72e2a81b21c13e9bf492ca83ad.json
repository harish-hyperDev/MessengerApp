{"ast":null,"code":"import _slicedToArray from\"F:\\\\CooL\\\\Websites\\\\chat-app\\\\mitai-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";//import logo from './logo.svg';\n//import { initializeApp } from \"firebase/app\";\nimport'./App.css';import React,{useEffect,useState}from\"react\";import Button from'@mui/material/Button';// Import the functions you need from the SDKs you need\n//import { initializeApp } from \"firebase/app\";\nimport{FormControl,InputLabel,Input}from'@mui/material';import Message from'./Message';import dbb from'./firebase';import{query,onSnapshot,collection,orderBy}from\"firebase/firestore\";import{addDoc}from\"firebase/firestore\";import firebase from'firebase/compat';//import { FieldValue } from 'firebase/firestore';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nfunction App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];var _useState3=useState([//{username: 'diablo', message: 'bo aki mayiro.. shamu nuga'},\n//{username: 'hyperx', message: 'owai moo'}\n]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),username=_useState6[0],setUsername=_useState6[1];// useEffect is used for running a piece of code based on a condition  \nuseEffect(function(){var q=query(collection(dbb,\"messages\"),orderBy('timestamp','desc'));var unsub=onSnapshot(q,function(querySnapshot){//orderBy('timestamp','desc');\n//setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\nquerySnapshot.forEach(function(doc){setMessages(querySnapshot.docs.map(function(doc){return doc.data();}));});console.log(unsub);/*\n      dbb.collection('messages').onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => doc.data()))\n    */});},[]);/*\n  useEffect(() => {\n    const q = query(collection(dbb, \"messages\"))\n    const unsub = onSnapshot(q, (querySnapshot) => {\n    //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        messages.add({username: username, message: input});\n      });\n      console.log(unsub);    \n    });\n  }, [] );*/useEffect(function(){setUsername(prompt('Enter your username'));},[]);// [] is condition, if left blank code will run only once when \"app\" component loads\n/* \n    so if we use the input variable value changes the \"code\" in useEffect will run\n    its really cool as \"input\" variable is a useState so \"input\" will change instaneously without any refresh and \"useEffect\" will run automatically as \"input\" is changing \n  */console.log(input);console.log(messages);var sendMessage=function sendMessage(event){event.preventDefault();//for not refreshing the page for form\n//setMessages( [...messages, {username: username, message: input} ]);\n// all the logic to send message\n/*async () => {\n      try{\n          await addDoc(doc(dbb, \"messages\"), {\n            username: username,\n            message: input,\n        })\n        return 1;\n      }\n      catch (error) {console.log(error)}\n\n      \n    }*/try{var docRef=addDoc(collection(dbb,\"messages\"),{username:username,message:input,timestamp:firebase.firestore.Timestamp.now()});console.log(\"Document written with ID: \",docRef.id);}catch(e){console.error(\"Error adding document: \",e);}/*\n    async () => {\n      const citiesCol = collection(dbb, 'cities');\n      const citySnapshot = await setDocs(citiesCol);\n    }*/setInput('');};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"h1\",null,\"GHOST Chat\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Sup' \",username),/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(FormControl,null,/*#__PURE__*/React.createElement(InputLabel,null,\"Enter message..\"),/*#__PURE__*/React.createElement(Input,{value:input,onChange:function onChange(event){return setInput(event.target.value);}}),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",disabled:!input,type:\"submit\",onClick:sendMessage},\"Send Message\"))),messages.map(function(message){return/*#__PURE__*/React.createElement(Message,{username:username,message:message})//<p>{message}</p>\n;}));}export default App;","map":{"version":3,"sources":["F:/CooL/Websites/chat-app/mitai-app/src/App.js"],"names":["React","useEffect","useState","Button","FormControl","InputLabel","Input","Message","dbb","query","onSnapshot","collection","orderBy","addDoc","firebase","App","input","setInput","messages","setMessages","username","setUsername","q","unsub","querySnapshot","forEach","doc","docs","map","data","console","log","prompt","sendMessage","event","preventDefault","docRef","message","timestamp","firestore","Timestamp","now","id","e","error","target","value"],"mappings":"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","sourcesContent":["//import logo from './logo.svg';\n//import { initializeApp } from \"firebase/app\";\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Button from '@mui/material/Button'\n// Import the functions you need from the SDKs you need\n//import { initializeApp } from \"firebase/app\";\nimport { FormControl, InputLabel, Input } from '@mui/material';\nimport Message from './Message';\nimport dbb from './firebase';\nimport { query, onSnapshot, collection, orderBy } from \"firebase/firestore\";\nimport { addDoc } from \"firebase/firestore\"; \nimport firebase from 'firebase/compat';\n//import { FieldValue } from 'firebase/firestore';\n\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n    //{username: 'diablo', message: 'bo aki mayiro.. shamu nuga'},\n    //{username: 'hyperx', message: 'owai moo'}\n  ]);\n  const [username, setUsername] = useState('');\n\n  // useEffect is used for running a piece of code based on a condition  \n\n  useEffect(() => { \n    const q = query(collection(dbb,\"messages\"), orderBy('timestamp', 'desc'))    \n    \n    const unsub = onSnapshot(q, (querySnapshot) => {   \n      //orderBy('timestamp','desc');\n      //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        setMessages(querySnapshot.docs.map(doc => doc.data()));\n      });\n    console.log(unsub);\n    \n    /*\n      dbb.collection('messages').onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => doc.data()))\n    */\n    });\n  }, [] )\n\n  /*\n  useEffect(() => {\n    const q = query(collection(dbb, \"messages\"))\n    const unsub = onSnapshot(q, (querySnapshot) => {\n    //setMessages(\"Messages\", querySnapshot.docs.map(d => doc.data()));\n      querySnapshot.forEach((doc) => {\n        messages.add({username: username, message: input});\n      });\n      console.log(unsub);    \n    });\n  }, [] );*/\n\n\n  \n  useEffect(() => {\n    setUsername(prompt('Enter your username'));\n  }, [] ) // [] is condition, if left blank code will run only once when \"app\" component loads\n\n  /* \n    so if we use the input variable value changes the \"code\" in useEffect will run\n    its really cool as \"input\" variable is a useState so \"input\" will change instaneously without any refresh and \"useEffect\" will run automatically as \"input\" is changing \n  */\n\n  \n\n  console.log(input);\n  console.log(messages);\n\n  const sendMessage = (event) => {\n    event.preventDefault();   //for not refreshing the page for form\n\n\n    //setMessages( [...messages, {username: username, message: input} ]);\n\n    // all the logic to send message\n    /*async () => {\n      try{\n          await addDoc(doc(dbb, \"messages\"), {\n            username: username,\n            message: input,\n        })\n        return 1;\n      }\n      catch (error) {console.log(error)}\n\n      \n    }*/\n\n    try {\n      const docRef = addDoc(collection(dbb, \"messages\"), {\n        username: username,\n        message: input,    \n        timestamp: firebase.firestore.Timestamp.now(),\n      });\n      console.log(\"Document written with ID: \", docRef.id);\n    } catch (e) {\n      console.error(\"Error adding document: \", e);\n    }\n    \n   /*\n    async () => {\n      const citiesCol = collection(dbb, 'cities');\n      const citySnapshot = await setDocs(citiesCol);\n    }*/\n    \n\n    setInput('');\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <h1>GHOST Chat</h1>\n      <h2>Sup' {username}</h2>\n\n      \n\n      {/*input field*/}\n      <form>\n      <FormControl>\n        <InputLabel>Enter message..</InputLabel>\n        <Input value={input} onChange={event => setInput(event.target.value)}/>\n        <Button variant=\"contained\" color=\"primary\" disabled={!input} type='submit' onClick={sendMessage}>Send Message</Button>\n      </FormControl>                \n      </form>\n      \n      {/*messages*/}\n      {\n        \n        messages.map(message => (\n          <Message username={username} message={message} />\n          //<p>{message}</p>\n        ))\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}